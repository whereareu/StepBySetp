Dependency and Injection

What is a dependency on Android

If one class uses an instance of another class then it is called dependency. For example - If X class holds the reference of Y class, then class X dependents on class Y. Thus we can say, class Y is the dependency of class X. So, the problem is, if we do changes in class one then we have to do the changes in another class also. So, to increase the rigidity, immorality, and fragility we use Dependency Injections. For example:

public class Stream {

    public static void main(String[] args) {
        Math math = new Math();
        Science science = new Science();
        Subject subject = new Subject(math, science);
        subject.read();
    }
    
}

In the above example, Math math = new Math(); and Science science = new Science(); shows the hard dependency. So, to avoid this we use dependency injection.

Injection- Simply means passing these dependencies from the outside. It works on the principle of Inversion of Control (IoC)

Inversion of Control: It is generally meant any sort of programming which doesn't create the object. Instead, they get the objects which they need from outside sources. For example, let's suppose you had a bakery and you hire someone from outside to breake cakes. This is the concept of IoC.

Dependency injection: DI facilitates a class to configure it's dependency from outside not statically.

Advantages:

It helps to remove the boilerplate code. Because the initialization of dependencies handled by the injecting component.

Testing is easy.

Local Singletons(Scopes)

Body----------->Blood
		^
       _________________|________________
      |	      |	       |	         |	
A_Blood	B_Blood	AB_Blood   O_Blood

In the diagram, we have a class Body that denpends on a class Blood. Just like real life, Body will have Blood as a member indide of its class (Body depends on Blood). In addition, we can inject the blood into the body using an injection(when body need it). Of course we could create a factory inside Body to create Blood but this would create boilerplate ocde. It is better if we just inject it throug a dependency injection framework, that is where Dagger2 comes in.


Dagger is a framework that simply works on the Dependency Injection framework. 

@Injection
Injection/Dependency Client:

A class that uses instance is the client or injection class. We have three places to put our injections with a symbol @Inject at constructor, methods, and fields.

public class Subject 
{
    private Math math ;
    private Science science;

    @Inject
    public Subject(Math math, Science science ){}

    public void read(){ }
}

public class Subject {
    @Inject 
    Math math ;

    private Science science ;   //canâ€™t be injected

    @Inject
    public Subject(Science science ){}

    public void read(){ }
}

public class Subject {
    Math math;
    private Science science;

    @Inject
    public Subject(Math math, Science science){}

    @Inject
    public void readMathBook(){ }

    public void read(){ }
}

Modules and  providers:
It is a creator. It's role is to provide instances. If we don't own the class and it comes from outside then we use modules and providers. As it comes from the external class we can't use @inject in it.

@Module
class ScienceModule{

    @Provides
    ScienceBook provideScienceBooks(){
        return new ScienceBook();
     }
}

Component in Dagger

Commponent are dagger access points. We can say, it is a dependency manager or an interface that binds the module and injects the class. It holds all the dependency together.

@Component(modules={ApplicationModule.class,  ScienceModule.class})
public interface SubjectComponent{
    
    Subject getSubject();
    
    void inject(SubjectActivity activity); // this line is to inject the class.
}

How to call dagger component:

public class SubjectActivity extends AppCompatActivity {
    @Inject
    Subject subject;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_subject);

        //Calling dagger component
        DaggerSubjectComponent component = DaggerSubjectComponent.create();
        component.inject(this);
        subject.read();
    }
}

Dagger Scopes

If your login flow (managed by a single LoginActivity) consists of multiple fragments, you should reuse the same instance of LoginViewModel in all fragments. @Singleton cannot annotate LoginViewModel to reuse the instance for the following reasons:

The instance of LoginViewModel would persistent in memory after the flow has finished.

You want a different instance of LoginViewModel for each login flow. For example, if the user logs out, you want a different instance of LoginViewModel, rather than the same instance as when the user logged in for the first time.

To scope LoginViewModel to the lifecycle of LoginActivity you need to create a new component (a new subgraph) for the login flow and a new scope.

Let's create a graph specific to the login flow.

@Component
interface LoginComponent {}

Now, LoginActivity should get injections from LoginComponent because it has a login-specific configuration. This removes the responsibility to inject LoginActivity from the ApplicationComponent class. 

@Component
interface LoginComponent {
    fun inject(activity: LoginActivity)
}

LoginComponent must be able to access the objects from ApplicationComponent because LoginViewModel depends on UserRepository. The way to tell Dagger that you want a new component to use part of another component is with Dagger subcomponents. The new component must be a subcomponent of the component containing shared resources.

Subcomponents are components that inherit and extend the object graph of a parent component. Thus, all objects provided in the parent component are provided in the subcomponent too. In this way, an object from a subcomponent can depend on an object provided by the parent component. 

To create instance of subcomponents, you need an instance of the parent component. Therefore, the objects provided by the parent component to the subcomponent are still scoped to the parent component. 

In the example, you must define LoginComponent as a subcomponent of ApplicationComponent. To do this, annotate LoginComponent with @Subcomponent:

// @Subcomponent annotation informs Dagger this interface is a Dagger Subcomponent
@Subcomponent
interface LoginComponent {
    // This tells Dagger that LoginActivity requests injection from LoginComponent
    // so that this subcomponent graph needs to satisfy all the dependencies of the
    // fields that LoginActivity is injecting
    fun inject(loginActivity: LoginActivity)
}

And a plus method in ApplicationComponent, to indicate that this component can be added subcomponents of that type:

@Singleton
@Component(modules = [NetworkModule::class])
interface ApplicationComponent {
   ...
   fun plus() LoginComponent
}









