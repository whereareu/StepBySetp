接口的意义在于对逻辑的抽象，并对外提供统一的标准，使用者不必关心接口实现的细节。接口，接口的实现者，接口的拥有者，三者之间彼此相互独立，但却通过接口相互关联。

这里的重点不在于接口的具体实现细节，因为这是细节，是可变的，是不确定的。重点是假设接口已经被实现以后，我们要利用接口做的事情。

通过对逻辑的抽象，可以让我们更纯粹得关注更底层、更本质的东西，因为它是一组相关的方法或者接口组合而成的简单描述，清晰明了。

一旦接口确定了，再根据接口去具体继承并实现，而不用思考要做什么，你只需要关系怎么做就好，这样分工更为明确，效率更高。

即使接口实现的细节发生变化，可是对外的接口却不需要做出更改，更容易维护。因为本质的东西是更不容易发生变化，相比实现细节。同样的，如果需要增加或者删除一些逻辑，只需要为接口增加或者删除一个方法或者接口，并不会对其它内容造成影响。

因此重点在于接口的定义和对接口的使用。一般的情况是，更具接口的使用需求再去定义接口，也就是接口的依赖者。