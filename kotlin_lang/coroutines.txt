Coroutines

The current framework which is available to handle multithreading leads to callback hells and blocking states because we do not have any other simple way to guarantee thread-safe execution.

Coroutines, a very efficient and complete framework to manage concurrency in a more performant and simple way.

Corroutines = Co + Routines. Here, Co means cooperation and Routines means functions. It means that when functions cooperate with each other, we call it as Coroutines.

fun functionA(case: Int) {
    when (case) {
        1 -> {
            taskA1()
            functionB(1)
        }
        2 -> {
            taskA2()
            functionB(2)
        }
        3 -> {
            taskA3()
            functionB(3)
        }
        4 -> {
            taskA4()
            functionB(4)
        }
    }
}

fun functionB(case: Int) {
    when (case) {
        1 -> {
            taskB1()
            functionA(2)
        }
        2 -> {
            taskB2()
            functionA(3)
        }
        3 -> {
            taskB3()
            functionA(4)
        }
        4 -> {
            taskB4()
        }
    }
}

functionA(1)

Here, functionA will do the taskA1 and give control to the functionB to execute the taskB1.
Then, functionB will do the taskB1 and give the control back to the functionA to execute the taskA2 and so on.

The important thing is that functionA and functionB are cooperating with each other.
It has given us the power: Execute a few lines of functionA and then execute a few lines of functionB and then again a few lines of functionA and so on.

With Kotlin Coroutines, the above cooperation can be done very easily which is without the use of when or switch case which I have used in the above example for the sake of understanding.

Now that, we have understood what are coroutines when it comes to cooperation between the funtions. There are endless possibilities that open up becauseof the cooperative nature of functions.

It can execute a few lines of functionA and then execute a few linnes of functionB and then again a few lines of functionA and so on. This will be helpful when a thread is sitting idle not doing anything, in that case, it can execute a few lines of another function. This way, it can take the full advantage of thread. Ultimately the cooperation helps in multitasking. 

It will enable writing asynchronous code in a synchronous way.

Overall, the Coroutines make the multitasking very easy.

So, we can say that Coroutines and the threads both are multitasking. But the difference is that threads are managed by the OS and coroutines by the users as it can execute a few lines of funtion by taking advantage of the cooperation.

It's an optimized framework written over the actual threading by taking advantage of the cooperative nature of functions to make it light and yet powerful. So we can say that Coroutines are lightweight threads. A lightweight thread means it doesn't map on the native thread, so it doesn't requrie context switching on the processor, so they are faster.(may be like nm)

What does it mean when I say "it doesn't map on the native thread" ?

Coroutines are available in many languages. Basically, there are two types of Coroutines:

Stackless

Stackful

Kotlin implements stackless coroutines-it means that the coroutines don't have their own stack, so they don't map on the native thread.

Now, you can understand the below paragraph, what the official website of Kotlin says

One can think of a  coroutine as a light-weight thread. Like threads, coroutines can run in parallel, wait for each other and communicate. The biggest difference is that coroutines are very cheap, almost free: we can create thousands of them, and pay very little in terms of performance. True threads, on the other hand, are expensive to start and keep around. A thousand threads can be a serious challenge for a modern machine.

Corountines do not replace threads, it's more like a framework to manage it.

The exact definition of Coroutines: A framework to manage concurrency in a more performant and simple way which its lightweight thread which is written on top of the actual threading framework to get the most out  of it by tasking the advantage of cooperative nature of functions.

Now that, we have understood whtat exactly Coroutines are. Now we need to konw why there is a need for the solutions which Kotlin Coroutines provide.

Now, our function fetchUser will look like below:

fun fetchUser(): User {
    // make network call
    // return user
}

fun showUser(user: User) {
    // show user
}

fun fetchAndShowUser() {
    val user = fetchUser()
    showUser(user)
}

When we call the fetchAndShowUser function, it will throw the NetworkOnMainThreadException as the network call is not allowed on the main thread.

There are many ways to solve that. A few of them are as follows:

1 Using Callback: Here, we run the fetchUser in the backgroud thread and we pass the result with the callback.

fun fetchAndShowUser() {
    fetchUser { user ->
        showUser(user)
    }
}

2 Using RxJava: Reactive world approach. This way we can get rid of the nested callback.

fetchUser()
        .subscribeOn(Schedulers.io())
        .observerOn(AndroidSchedulers.mainThread())
        .subscribe { user ->
            showUser(user)
        }

3 Using Coroutines: Yes, coroutines.

suspend fun fetchAndShowUser() {
     val user = fetchUser() // fetch on IO thread
     showUser(user) // back on UI thread
}

suspend fun fetchUser(): User {
    return GlobalScope.async(Dispatchers.IO) {
        // make network call
        // return user
    }.await()
}

Here, the above code looks synchronous, but it is asynchronous. We will see how is it possible.

dependencies {
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:x.x.x"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:x.x.x"
}

suspend fun fetchUser(): User {
    return GlobalScope.async(Dispatchers.IO) {
        // make network call
        // return user
    }.await()
}

suspend fun fetchAndShowUser() {
    val user = fetchUser() // fetch on IO thread
    showUser(user) // back on UI thread
}

fun showUser(user: User) {
    // show user
}

Dispathcers

Dispatchers help coroutines in deciding the thread on which the work has to be done. There are majorly three types of Dispatchers which are as IO, Default, and Main. IO dispatcher is used to do the network and disk-related work. Default is used to do the CPU intensive work. Main is the UI thread of Android. In order to use these, we need to wrap the work under the async function. Async function looks like:

suspend fun async()

Suspend

Suspend function is a function that could be started, paused, and resume.

	| functionA suspended |
functionA	   ->        Therad	->  functionA
	|          functionB	    |

functionA was running (Coroutine A)

functionA was suspended after some time.

While the functionA was supended, functionB(Cortoutine B) started runnig and finished its work. Then again, functionA started running. CoroutineA and CoroutineB exists in the same thread

When we add the suspend keyword in the function, all the cooperations are automatically done for us. We don't have to use when or switch case. When we write like below:

suspend fun doSomething(request: Request): Response {
     // do something
}

Internally, it gets converted by the compiler to another function without the suspend keyword with an extra parameter of the type Continuation<T> like below:

fun doSomething(request: Request, continuation: Continuation)..

The Continuation<T> is an interface which looks like below(taken form Kotlin source code):
public interface Continuation<in T> {
    public val context: CoroutineContext
    public fun resumeWith(result: Result<T>)
}

In addition to that, it has two extension functions.
fun <T> Continuation<T>.resume(value: T)
fun <T> Continuation<T>.resumeWithException(exception: Throwable)

If you notice the functions closely, they can be used to resume the coroutine with a return value or with an exception if an error had occurred while the function was suspended.

This way, a function could be started, paused, and resume with the help of Continuation. We just have to use the suspend keyword.

Note: Suspend functions are only allowed to be called from a coroutine or another suspend function. You can see that the async function which includes the keyword suspend. So, in order to use that, we need to make our function suspend too.

Suspend functions are only allowed to be called from a coroutine or another suspend function. You can see that the async function which includes the keyword suspend. So, in order to use that, we need to make our function suspend too.

So, the fetchAndShowUser can only be called from another suspend function or a coroutine. We can't make the onCreate function of an activity suspend, so we need to call it form the coroutines like below:

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    
    GlobalScope.launch(Dispatchers.Main) {
        fetchAndShowUser()
    }
    
}

Which is actually
override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)

    GlobalScope.launch(Dispatchers.Main) {
        val user = fetchUser() // fetch on IO thread
        showUser(user) // back on UI thread
    }
    
}

There are two functions in Kotlin to start the coroutines which are as follows:

.launch{} : fire and forget
.async{} ï¼šperform a task and return a result

The different is that the lanch{} does not return anything and the async{} returns an instance of Defered<T>, which has an await() function that returns the result of the coroutine like we have future in Java in which we do future.get() to the get the result.

Let's take an example to learn launch and async.

suspend fun fetchUserAndSaveInDatabase() {
    // fetch user from network
    // save user in database
    // and do not return anything
}

GlobalScope.launch(Dispatchers.Main) {
    fetchUserAndSaveInDatabase() // do on IO thread
}

As the fetchUserAndSaveInDatabase does not return anything, we can use the launch to complete that task and then do something on Main Thread.

But when we need the result back, we need to use the async.

suspend fun fetchFirstUser(): User {
    // make network call
    // return user
}
suspend fun fetchSecondUser(): User {
    // make network call
    // return user
}

GlobalScope.launch(Dispatchers.Main) {
    val userOne = async(Dispatchers.IO) { fetchFirstUser() }
    val userTwo = async(Dispatchers.IO) { fetchSecondUser() }
    showUsers(userOne.await(), userTwo.await()) // back on UI thread
}

Here,it makes both the network call in parallel, await for the results, and then calls the showUsers function.

suspend fun fetchUser(): User {
    return withContext(Dispatchers.IO) {
        // make network call
        // return user
    }
}

withContext is nothing but another way of writing of writing the async where we do not have to write await().

But there are many more things that we should konw about the withContext and the await.

GlobalScope.launch(Dispatchers.Main) {
    val userOne = withContext(Dispatchers.IO) { fetchFirstUser() }
    val userTwo = withContext(Dispatchers.IO) { fetchSecondUser() }
    showUsers(userOne, userTwo) // back on UI thread
}

When we use withContext, it will run in series instead of parallel. That is a major difference.



Scopes in Kotlin Coroutines

Coroutines by themselves don't help you keep track of the work that's being done. It's perfectly fine to have a large number of coroutines-hundreds or even thousands-and have all of them suspended at the same time. And, while coroutines are cheap, the work they perform is often expensive, like reading files or making network requests.

It's quite difficult to keep track of one thounsand coroutines manually using code. You could try to track all them and manually ensure they complete or cancel, but code like this is tedious and error prone. If the code is not perfect, it will lose track of a coroutine which is what I call a work leak.

A work leak is like a memory leak, but worse. It's a coroutine that's been lost. In addition to using memory, a work leak can resume itself to use CPU, disk, or even lanch a network request.

Assuming that our acitity is the scope, the background task should get canceld  as soon as the activity is destroyed.

In the activity, we need to implement CoroutineScope.

class MainActivity : AppCompatActivity(), CoroutineScope {

    override val coroutineContext: CoroutineContext
        get() = Dispatchers.Main + job

    private lateinit var job: Job

}

In the onCreate and onDestroy function.

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    job = Job() // create the Job
}

override fun onDestroy() {
    job.cancel() // cancel the Job
    super.onDestroy()
}

As soon as the activity is destroyed, the task will get canceled if it is running because we have defined the scope.

When we need the global scope which is our application scope, not the activity scope, we can use the GlobalScope as below:

GlobalScope.launch(Dispatchers.Main) {
    val userOne = async(Dispatchers.IO) { fetchFirstUser() }
    val userTwo = async(Dispatchers.IO) { fetchSecondUser() }
}




To help avoid leaking coroutines, Kotlin introduced structured concurrency. Structured concurrency is a combination of language features and best practices that, when followed, help you keep track of all work running in coroutines.

On Android, we can use structured concurrency to do three things:

1 Cancel work when it is no longer needed.
2 Keep track of work while it's running.
3 Signal errors when a coroutine fails.

##Cancel work with scopes

In Kotlin, coroutines must run in something called a CoroutineScope. A CoroutineScope keep track of your coroutines, even coroutines that are suspended. Unlike the Dispatchers we talked about it part on, it doesn't actually execute your coroutines-it just makes sure you don't lose track of them.

To ensure that all coroutines are tracked, Kotlin does not allow you to start a new coroutine without a CoroutineScope. You can think of a CoroutineScope as sort of like lightWeight version of an ExecutorService with superpowers. It grants you the ability ot start  new coroutines which come with all that suspend and resume goodness we explored in part one.

A CoroutineScope keeps track of all your coroutines, and it can cancel all of the coroutines started in it. This fits well with Android development where you want to ensure that you clean up everything that was started by a screen when the user leaves.

Scopes in Kotlin Coroutines are very useful because we need to cancel the background task as soon as the activity is destroyed. 

Assuming that our activity is the scope, the background task should get cancled as soon as the activity is destroyed.

##Starting new coroutines 

It's important to note that you can't just call a suspend function from anywhere. The suspend and resume mechanism requires that you switch from normal functions to a coroutine.

In almost cases, the right answer for how to start a coroutine from a regular function is to use launch. Since the regular function has no way to call await(remember, it can't call suspend functions directly) it doesn't make sense to use async as your main entry to corouines. We'll talk later about when it makes sense to use async.

You can think of launch as a bridge that takes your code from regular functions into a coroutines world. Inside of the launch body, you can call suspend functions and create main satety like we covered in the last post.

scope.launch {
    // This block starts a new coroutine 
    // "in" the scope.
    // 
    // It can call suspend functions
   fetchDocs()
}

Warning: A big difference between launch and async is how they handle exceptions. async expects that you will eventually call await to get a result(or exception) so it won't throw exceptions by default. That means if you use async to start a new coroutine it will silently drop exceptions.

Since launch and async are only available on a CoroutineScope, you konw that any coroutine you create will be tracker by a scope. Kotlin just doesn't let you create an untracker coroutine, which goes a long way to avoid work leaks.

##Start in the ViewModel

So if a CoroutineScope keeps track of all coroutines that are lauched in it. and launch creates a new coroutine, where exactly should you call launch and put your scopes? And, when does it make sense to cancel all the coroutines started in a scope?

On Android, it often makes sense to associate a CoroutineScope with a user screen. This lets you avoid leaking coroutines or doing extra work for Activities or Fragments that are no longer relevant to the user. When the user navigates away from the screen, the CoroutineScope associated with the screen can cancel all work.

When integrating coroutines with Android Architecture Components, you typically want to launch coroutines in the ViewModel. This is natural place since that's where most serious work starts-and you won't have to worry about ratation killing all your coroutines.

To use coroutines in a ViewModel, you can use the viewModelScope extension property from lifecycle-viewmodel-ktx:2.1.0-alpha04.viewModelScope is on-track to be released in AndroidX Lifecycle (v2.1.0) and is currently in alpha. You can read more about how it works in @manuelvicntâ€™s blog post. As the library is currently in alpha, there may be bugs, and the APIs could change before the final release.

class MyViewModel(): ViewModel() {
    fun userNeedsDocs() {
        // Start a new coroutine in a ViewModel
        viewModelScope.launch {
            fetchDocs()
        }
    }
}

ViewModelScope will automatically cancel any coroutinne that is started by this ViewModel when it is cleared(When the onCleared() callback is called). This is typically the right behavior-if we haven't fetched the docs, and the user has closed the app, we're probably just wasting their battery completing the request.

And for more safety, a CoroutineScope will propagate itself. So, if a coroutine you start goes on to start another coroutine, they'll both end up in the same scope. That means even when libraries that you depend on start a coroutine from your viewModelScope, you'll have a way to cancel them!

Warning: Coroutines are cancelled cooperatively by throwing a CancellationException when the coroutine is suspended. Exception handlers that catch a top-level exception like Throwable will catch this exception. If you consume the exception in an exception handler, or never suspend, the coroutine will linger in a semi-canceled state.

fun runForever() {
    // start a new coroutine in the ViewModel
    viewModelScope.launch {
        // cancelled when the ViewModel is cleared
        while(true) {
            delay(1_000)
            // do something every second
        }
    }
}

By using viewModelScope youâ€™re able to ensure that all work, even this infinite loop, is cancelled when it is no longer needed.

##Keep track of work

Launching one coroutine is good-and for a lot code that's really all you're ever need to do. Launch a coroutine, make a network request, and write the result to the database.

Sometimes, though, you need a bit more complexity. Say you wanted to do two network requests simultaneously(or at the same time) in a coroutine-to do that your'll need to start more coroutines!

To make more coroutines, any suspend functions can start more coroutines by using another builder called coroutineScope or its cousin supervisorScope. This API is, honestly, a bit  confusing. The corotoutineScope builder and CoroutineScope are different things despite only have one character difference in their name.

Launching new coroutines everywhere is one way to create potential work leaks. The caller may not know about the new coroutines, and if it doesn't how could it keep track of the wrok?

To fix this, structured concurrency helps us out. Namely, it provides a guarantee that when a suspend function returns, all of its work is done.

Here's an example of using coroutineScope to fetch two documents:

suspend fun fetchTwoDocs() {
coroutineScope {
        launch { fetchDoc(1) }
        async { fetchDoc(2) }
    }
}

CoroutineScope and supervisorScope let you safely launch coroutines from suspend functions.

Note, though, that code never explicitly waits for either of the new coroutines! It seems like fetchTwoDocs will return while the coroutines are running.

To make structuted concurrency and avoid work leaks, we wnat to ensure that when a suspend fucntion like fetchTwoDocs returns, all of its work is done. That means both the coroutines it launches must complete before fetchTowDocs returns.

Kotlin ensures that the work does not leak from fetchTowDocs with the coroutineScope builder. The coroutineScope builder will suspend itself until all coroutines started inside of it are complete. Because of this, there's no way return form fetchTwoDocs untill all coroutines started in the coroutineScope builder are complte.

Lots and lots of work

Now that we've explored keeping track of one and two coroutines, it's time to go all-in and try to keep track of one thousand coroutines!

suspend fun ladLots() {
    coroutineScope {
         repeat(1-000) {
	launch{ fetchDocs() }
         }
    }
}

This example shows making one thousand network request simultaneously. This is not recommend in real Android code â€” your app will use lots of resources.

In this code, we launch one thousand coroutines with launch inside a coroutineScope builder. You can see how things get wired up. Since we're in a suspend function, some code somewhere must have used a CoroutineScope to create a coroutine. We don't know anything about taht CoroutineScope defined somewhere elso. No matter what calling scope it is, the coroutineScope builder will use it as the parent to the new scope it creates.

Then, inside the coroutineScope block, launch will start coroutines "in" the new scope. As the coroutines started by launch complete, the new scope will keep track of them. Finally, once all of the coroutines started inside the coroutineScope are complete, loadLots is free to return.

Note: the parent-child relationship between scopes and coroutines is created using job Objects. But you can often think of the relationship between coroutines and scopes without diving into that level.

coroutineScope and supervisorScope will wait for child coroutines to complete.





Kottlin Coroutines patterns & anti-patterns

Wrap async calls with coroutineScope or use SupervisorJob to handle exceptions
If async block may throw exception don't rely on wrapping it with try/catch block.

val job: Job = Job()
val scope = CoroutineScope(Dispatchers.Default + job)
// may throw Exception
fun doWork(): Deferred<String> = scope.async { ... }   // (1)
fun loadData() = scope.launch {
    try {
        doWork().await()                               // (2)
    } catch (e: Exception) { ... }
}

In the example above doWork function launchers new coroutine which may throw an unhadled exception. If you try to wrap doWork with try/catch block it will still crash.

This happens because the failure of any of the job's children leads to an immediate failure of its parent.

One way how to can avoid the crash is by using SupervisorJob
A failure or cancellation of achild odes not cause the supervisor job to fail and does not affect its other children.

val job = SupervisorJob()                               // (1)
val scope = CoroutineScope(Dispatchers.Default + job)

// may throw Exception
fun doWork(): Deferred<String> = scope.async { ... }

fun loadData() = scope.launch {
    try {
        doWork().await()
    } catch (e: Exception) { ... }
}

Note: tis will work only if you explicitly run your async on coroutine scope with SupervisorJob. So the code below will still crash your application because async is launched in the scope of parent couroutine.
X 
val job = SupervisorJob()                               
val scope = CoroutineScope(Dispatchers.Default + job)

fun loadData() = scope.launch {
    try {
        async {                                         // (1)
            // may throw Exception 
        }.await()
    } catch (e: Exception) { ... }
}

 The other way how you can avoid the crash, which is preferable, is by wrapping async with coroutineScope (1). Now when the exception occurs inside async it will cancel all other coroutines created in this scope, without touching outer scope. (2)

val job = SupervisorJob()                               
val scope = CoroutineScope(Dispatchers.Default + job)

// may throw Exception
suspend fun doWork(): String = coroutineScope {     // (1)
    async { ... }.await()
}

fun loadData() = scope.launch {                       // (2)
    try {
        doWork()
    } catch (e: Exception) { ... }
}

Prefer the Main dispatcher for root coroutine

If you need to do a background work and update UI inside your root coroutine, donâ€™t launch it with non-Main dispatcher.

X 
val scope = CoroutineScope(Dispatchers.Default)          // (1)

fun login() = scope.launch {
    withContext(Dispatcher.Main) { view.showLoading() }  // (2)  
    networkClient.login(...)
    withContext(Dispatcher.Main) { view.hideLoading() }  // (2)

In the example above we launch root coroutine using a scope with Default dispatcher (1). With this approach, every time when we need to touch user interface we have to switch context (2).

In most cases, itâ€™s preferable to create your scope with the Main dispatcher which results in simpler code and less explicit context switching.

val scope = CoroutineScope(Dispatchers.Main)

fun login() = scope.launch {
    view.showLoading()    
    withContext(Dispatcher.IO) { networkClient.login(...) }
    view.hideLoading()
}

Avoid usage of unnecessary async/await

X
If you are using async function followed by immediate await you should stop doing this.

launch {
    val data = async(Dispatchers.Default) { /* code */ }.await()
}

If you want to switch coroutine context and immediately suspend parent coroutine withContext is a preferable way to do that.

launch {
    val data = withContext(Dispatchers.Default) { /* code */ }
}

Performance wise it's not a big concern (even thought async creates new coroutine to do the work) but semantically async implies that you want to start several coroutines in the background and only then await on them.

If you need to cancel coroutine, don't cancel scope job in the first place. 

class WorkManager {
    val job = SupervisorJob()
    val scope = CoroutineScope(Dispatchers.Default + job)
    
    fun doWork1() {
        scope.launch { /* do work */ }
    }
    
    fun doWork2() {
        scope.launch { /* do work */ }
    }
    
    fun cancelAllWork() {
        job.cancel()
    }
}

fun main() {
    val workManager = WorkManager()
    
    workManager.doWork1()
    workManager.doWork2()
    workManager.cancelAllWork()
    workManager.doWork1() // (1)
}

The issue with the above code is that when we cancel job we put it into the completed state. Coroutines launched in a scope of the completed job will not be executed (1).

When you wnat to cancel all coroutines of a specific scope, you can use cancelChildren function. Also, it's a good practice to provide the possibility to cancel individual jobs (2).

class WorkManager {
    val job = SupervisorJob()
    val scope = CoroutineScope(Dispatchers.Default + job)
    
    fun doWork1(): Job = scope.launch { /* do work */ } // (2)
    
    fun doWork2(): Job = scope.launch { /* do work */ } // (2)
    
    fun cancelAllWork() {
        scope.coroutineContext.cancelChildren()         // (1)                             
    }
}
fun main() {
    val workManager = WorkManager()
    
    workManager.doWork1()
    workManager.doWork2()
    workManager.cancelAllWork()
    workManager.doWork1()
}

Avoid writing suspend funcion with an implicit dispatcher

Don't write suspend function which relies on execution form specific coroutine dispatcher.

suspend fun login(): Result {
    view.showLoading()
    
    val result = withContext(Dispatcher.IO) {  
        someBlockingCall() 
    }
    view.hideLoading()
    
    return result
}

In the example above login function is a suspend function which will crash if you execute it from coroutine which uses non-Main dispatcher.

launch(Dispatcher.Main) {     // (1) no crash
    val loginResult = login()
    ...
}

launch(Dispatcher.Default) {  // (2) cause crash
    val loginResult = login()
    ...
}

Avoid usage of global scope 

If you are using GlobalScope everywhere in you Android application you should stop doing this.

GlobalScope.launch {
    // code
}

Global scope is used to launch top-level coroutines which are operating on the whole application lifetime and not cancelled prematurely.

In Android coroutine cann be easily scoped to Activity, Fragment, View or ViewModel lifecycle.

class MainActivity : AppCompatActivity(), CoroutineScope {
    
    private val job = SupervisorJob()
    
    override val coroutineContext: CoroutineContext
        get() = Dispatchers.Main + job
    
    override fun onDestroy() {
        super.onDestroy()
        coroutineContext.cancelChildren()
    }
    
    fun loadData() = launch {
        // code
    }
}





