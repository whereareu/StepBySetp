Coroutines by themselves don't help you keep track of the work that's being done. It's perfectly fine to have a large number of coroutines-hundreds or even thousands-and have all of them suspended at the same time. And, while coroutines are cheap, the work they perform is often expensive, like reading files or making network requests.

It's quite difficult to keep track of one thounsand coroutines manually using code. You could try to track all them and manually ensure they complete or cancel, but code like this is tedious and error prone. If the code is not perfect, it will lose track of a coroutine which is what I call a work leak.

A work leak is like a memory leak, but worse. It's a coroutine that's been lost. In addition to using memory, a work leak can resume itself to use CPU, disk, or even lanch a network request.

CoroutineScope Defines a scope for new coroutines. Every coroutine builder
 * is an extension on [CoroutineScope] and inherits its [coroutineContext][CoroutineScope.coroutineContext]
 * to automatically propagate both context elements and cancellation.

 * Manual implementation of this interface is not recommended, implementation by delegation should be preferred instead.
 * By convention, the [context of a scope][CoroutineScope.coroutineContext] should contain an instance of a [job][Job] to enforce structured concurrency.

Every coroutine builder (like [launch][CoroutineScope.launch], [async][CoroutineScope.async], etc)
 * and every scoping function (like [coroutineScope], [withContext], etc) provides _its own_ scope
 * with its own [Job] instance into the inner block of code it runs.
 * By convention, they all wait for all the coroutines inside their block to complete before completing themselves,
 * thus enforcing the discipline of **structured concurrency**.

Scopes in ViewModels

A CoroutineScope keeps track of all coroutines it creates. Therefore, if you cancel a scope, you cancel all coroutines it created. This is particularly important if you’re running coroutines in a ViewModel. If your ViewModel is getting destroyed, all the asynchronous work that it might be doing must be stopped. Otherwise, you’ll waste resources and potentially leaking memory. If you consider that certain asynchronous work should persist after ViewModel destruction, it is because it should be done in a lower layer of your app's architecture.

Add a CoroutineScope to your ViewModel by creating a new scope with a SupervisorJob that you cancel in the onCleared() method. The coroutines created with that scope will live as long as the ViewModel is being used. See following code:

class MyViewModel : ViewModel() {

    /**
     * This is the job for all coroutines started by this ViewModel.
     * Cancelling this job will cancel all coroutines started by this ViewModel.
     */
    private val viewModelJob = SupervisorJob()
    
    /**
     * This is the main scope for all coroutines launched by MainViewModel.
     * Since we pass viewModelJob, you can cancel all coroutines 
     * launched by uiScope by calling viewModelJob.cancel()
     */
    private val uiScope = CoroutineScope(Dispatchers.Main + viewModelJob)
    
    /**
     * Cancel all coroutines when the ViewModel is cleared
     */
    override fun onCleared() {
        super.onCleared()
        viewModelJob.cancel()
    }
    
    /**
     * Heavy operation that cannot be done in the Main Thread
     */
    fun launchDataLoad() {
        uiScope.launch {
            sortList()
            // Modify UI
        }
    }
    
    suspend fun sortList() = withContext(Dispatchers.Default) {
        // Heavy work
    }
}


Assuming that our acitity is the scope, the background task should get canceld  as soon as the activity is destroyed.

In the activity, we need to implement CoroutineScope.

class MainActivity : AppCompatActivity(), CoroutineScope {

    override val coroutineContext: CoroutineContext
        get() = Dispatchers.Main + job

    private lateinit var job: Job

}

In the onCreate and onDestroy function.

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    job = Job() // create the Job
}

override fun onDestroy() {
    job.cancel() // cancel the Job
    super.onDestroy()
}

As soon as the activity is destroyed, the task will get canceled if it is running because we have defined the scope.

When we need the global scope which is our application scope, not the activity scope, we can use the GlobalScope as below:

GlobalScope.launch(Dispatchers.Main) {
    val userOne = async(Dispatchers.IO) { fetchFirstUser() }
    val userTwo = async(Dispatchers.IO) { fetchSecondUser() }
}


To help avoid leaking coroutines, Kotlin introduced structured concurrency. Structured concurrency is a combination of language features and best practices that, when followed, help you keep track of all work running in coroutines.

On Android, we can use structured concurrency to do three things:

1 Cancel work when it is no longer needed.
2 Keep track of work while it's running.
3 Signal errors when a coroutine fails.

##Cancel work with scopes

In Kotlin, coroutines must run in something called a CoroutineScope. A CoroutineScope keep track of your coroutines, even coroutines that are suspended. Unlike the Dispatchers we talked about it part on, it doesn't actually execute your coroutines-it just makes sure you don't lose track of them.

To ensure that all coroutines are tracked, Kotlin does not allow you to start a new coroutine without a CoroutineScope. You can think of a CoroutineScope as sort of like lightWeight version of an ExecutorService with superpowers. It grants you the ability ot start  new coroutines which come with all that suspend and resume goodness we explored in part one.

A CoroutineScope keeps track of all your coroutines, and it can cancel all of the coroutines started in it. This fits well with Android development where you want to ensure that you clean up everything that was started by a screen when the user leaves.

Scopes in Kotlin Coroutines are very useful because we need to cancel the background task as soon as the activity is destroyed. 

Assuming that our activity is the scope, the background task should get cancled as soon as the activity is destroyed.

##Starting new coroutines 

It's important to note that you can't just call a suspend function from anywhere. The suspend and resume mechanism requires that you switch from normal functions to a coroutine.

In almost cases, the right answer for how to start a coroutine from a regular function is to use launch. Since the regular function has no way to call await(remember, it can't call suspend functions directly) it doesn't make sense to use async as your main entry to corouines. We'll talk later about when it makes sense to use async.

You can think of launch as a bridge that takes your code from regular functions into a coroutines world. Inside of the launch body, you can call suspend functions and create main satety like we covered in the last post.

scope.launch {
    // This block starts a new coroutine 
    // "in" the scope.
    // 
    // It can call suspend functions
   fetchDocs()
}

Warning: A big difference between launch and async is how they handle exceptions. async expects that you will eventually call await to get a result(or exception) so it won't throw exceptions by default. That means if you use async to start a new coroutine it will silently drop exceptions.

Since launch and async are only available on a CoroutineScope, you konw that any coroutine you create will be tracker by a scope. Kotlin just doesn't let you create an untracker coroutine, which goes a long way to avoid work leaks.

##Start in the ViewModel

So if a CoroutineScope keeps track of all coroutines that are lauched in it. and launch creates a new coroutine, where exactly should you call launch and put your scopes? And, when does it make sense to cancel all the coroutines started in a scope?

On Android, it often makes sense to associate a CoroutineScope with a user screen. This lets you avoid leaking coroutines or doing extra work for Activities or Fragments that are no longer relevant to the user. When the user navigates away from the screen, the CoroutineScope associated with the screen can cancel all work.

When integrating coroutines with Android Architecture Components, you typically want to launch coroutines in the ViewModel. This is natural place since that's where most serious work starts-and you won't have to worry about ratation killing all your coroutines.

To use coroutines in a ViewModel, you can use the viewModelScope extension property from lifecycle-viewmodel-ktx:2.1.0-alpha04.viewModelScope is on-track to be released in AndroidX Lifecycle (v2.1.0) and is currently in alpha. You can read more about how it works in @manuelvicnt’s blog post. As the library is currently in alpha, there may be bugs, and the APIs could change before the final release.

class MyViewModel(): ViewModel() {
    fun userNeedsDocs() {
        // Start a new coroutine in a ViewModel
        viewModelScope.launch {
            fetchDocs()
        }
    }
}

ViewModelScope will automatically cancel any coroutinne that is started by this ViewModel when it is cleared(When the onCleared() callback is called). This is typically the right behavior-if we haven't fetched the docs, and the user has closed the app, we're probably just wasting their battery completing the request.

And for more safety, a CoroutineScope will propagate itself. So, if a coroutine you start goes on to start another coroutine, they'll both end up in the same scope. That means even when libraries that you depend on start a coroutine from your viewModelScope, you'll have a way to cancel them!

Warning: Coroutines are cancelled cooperatively by throwing a CancellationException when the coroutine is suspended. Exception handlers that catch a top-level exception like Throwable will catch this exception. If you consume the exception in an exception handler, or never suspend, the coroutine will linger in a semi-canceled state.

fun runForever() {
    // start a new coroutine in the ViewModel
    viewModelScope.launch {
        // cancelled when the ViewModel is cleared
        while(true) {
            delay(1_000)
            // do something every second
        }
    }
}

By using viewModelScope you’re able to ensure that all work, even this infinite loop, is cancelled when it is no longer needed.

##Keep track of work

Launching one coroutine is good-and for a lot code that's really all you're ever need to do. Launch a coroutine, make a network request, and write the result to the database.

Sometimes, though, you need a bit more complexity. Say you wanted to do two network requests simultaneously(or at the same time) in a coroutine-to do that your'll need to start more coroutines!

To make more coroutines, any suspend functions can start more coroutines by using another builder called coroutineScope or its cousin supervisorScope. This API is, honestly, a bit  confusing. The corotoutineScope builder and CoroutineScope are different things despite only have one character difference in their name.

Launching new coroutines everywhere is one way to create potential work leaks. The caller may not know about the new coroutines, and if it doesn't how could it keep track of the wrok?

To fix this, structured concurrency helps us out. Namely, it provides a guarantee that when a suspend function returns, all of its work is done.

Here's an example of using coroutineScope to fetch two documents:

suspend fun fetchTwoDocs() {
coroutineScope {
        launch { fetchDoc(1) }
        async { fetchDoc(2) }
    }
}

CoroutineScope and supervisorScope let you safely launch coroutines from suspend functions.

Note, though, that code never explicitly waits for either of the new coroutines! It seems like fetchTwoDocs will return while the coroutines are running.

To make structuted concurrency and avoid work leaks, we wnat to ensure that when a suspend fucntion like fetchTwoDocs returns, all of its work is done. That means both the coroutines it launches must complete before fetchTowDocs returns.

Kotlin ensures that the work does not leak from fetchTowDocs with the coroutineScope builder. The coroutineScope builder will suspend itself until all coroutines started inside of it are complete. Because of this, there's no way return form fetchTwoDocs untill all coroutines started in the coroutineScope builder are complte.

Lots and lots of work

Now that we've explored keeping track of one and two coroutines, it's time to go all-in and try to keep track of one thousand coroutines!

suspend fun ladLots() {
    coroutineScope {
         repeat(1-000) {
	launch{ fetchDocs() }
         }
    }
}

This example shows making one thousand network request simultaneously. This is not recommend in real Android code — your app will use lots of resources.

In this code, we launch one thousand coroutines with launch inside a coroutineScope builder. You can see how things get wired up. Since we're in a suspend function, some code somewhere must have used a CoroutineScope to create a coroutine. We don't know anything about taht CoroutineScope defined somewhere elso. No matter what calling scope it is, the coroutineScope builder will use it as the parent to the new scope it creates.

Then, inside the coroutineScope block, launch will start coroutines "in" the new scope. As the coroutines started by launch complete, the new scope will keep track of them. Finally, once all of the coroutines started inside the coroutineScope are complete, loadLots is free to return.

Note: the parent-child relationship between scopes and coroutines is created using job Objects. But you can often think of the relationship between coroutines and scopes without diving into that level.

coroutineScope and supervisorScope will wait for child coroutines to complete.

